Terminals:
( ) none , and or not true false + - * / % = < > ! is in " ' [ ] { } for : # if elif else while break
Variables:
SS NL ALPHABET DIGIT OTHER SYNTAX BODY SERU HASHTAG PERSEN NBO NBC MUL PLUS MIN COMA POW DIVIDE DIV COLON SEMICOLON LESS EQUAL GREAT SBO SBC UNDERSCORE CBO CBC PETIK1 PETIK2 ALPHANUM STRING_QORD VAR_FIRST VAR LET VALUE NUMBER VV BOOLEAN OP EXPRESSION RELATION STRING ARRAY RANGE DICT_CONTENT DICT COMMENT IF_HEADER ELIF_HEADER ELIF ELSE WHILE WHILE_HEADER FOR_HEADER FOR FOR_VAR ITERABLE ITERATE CONTINUE BREAK PASS DEF_HEADER DEF_S DEF RETURN FUNC_BODY IF_FUNC ELIF_FUNC ELSE_FUNC WHILE_FUNC FOR_FUNC WITH_FUNC ITERATE_FUNC BREAK_FUNC CONTINUE_FUNC CLASS CLASS_HEADER CLASS_S IMP_S IMPORT WITH WITH_HEADER FUNCTION NONES ANDS ORS ISS INS TRUES FALSES NOTS FORS IFS ELIFS ELSES WHILES BREAKS CONTINUES DEFS RETURNS RANGES CLASSS FROMS IMPORTS ASS WITHS CASE CASE_HEADER CASE_EX CASES SWITCH SWITCH_CONTENT SWITCH_HEADER SWITCHS DEFAULT DEFAULT_HEADER DEFAULTS DELETE FINALLY NULL THROW TRY
Production:
SS -> SS SEMICOLON NL SS SEMICOLON NL | NL SS SEMICOLON NL | SS SEMICOLON NL | IF | WHILE | SWITCH | FOR | CLASS | DEF | IMPORT | COMMENT | BREAK | FUNCTION | CONTINUE | WITH | PASS | VAR EQUAL VV | VAR OP EQUAL VV | NONES | VV;
ALPHABET -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z;
DIGIT -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
OTHER -> $ | & | . | ? | @ | \ | ^ | ` | ~ | SERU | HASHTAG | PERSEN | NBO | NBC | MUL | PLUS | MIN | COMMA | DIVIDE | COLON | SEMICOLON | LESS | EQUAL | GREAT | SBO | SBC | UNDERSCORE | CBO | CBC | |;
SYNTAX -> NONES | ANDS | ORS | ISS | INS | TRUES | FALSES | NOTS | FORS | IFS | ELIFS | ELSES | WHILES | BREAKS | CONTINUES | DEFS | RETURNS | RANGES | CLASSS | FROMS | IMPORTS | ASS | WITHS;
NL -> NL NL | newline;
NUMBER -> NUMBER NUMBER | DIGIT;
STRING_WORD -> STRING_WORD STRING_WORD | ALPHABET | DIGIT | OTHER | SYNTAX;
STRING -> STRING STRING | PETIK2 STRING_WORD PETIK2 | PETIK1 STRING_WORD PETIK1;
VAR_FIRST -> ALPHABET | UNDERSCORE;
VAR_VARIABLE -> VAR_FIRST ALPHANUM | VAR_FIRST;


% Primary Expression
ASSIGNMENTEXPRESSION -> CONDITIONALEXPRESSION | LEFTSIDEEXPRESSION = ASSIGNMENTEXPRESSION | LEFTSIDEEXPRESSION COMPOUNDASSIGNMENT ASSIGNMENTEXPRESSION;
PRIMARYEXPRESSION -> SIMPLEEXPRESSION | FUNCTIONEXPRESSION | OBJECTLITERAL;
PRIMARYEXPRESSION -> SIMPLEEXPRESSION;
SIMPLEEXPRESSION -> THIS | NULL | TRUES | FALSES | NUMBER | STRING | VAR_VARIABLE | PARENTHESIZEDEXPRESSION | ARRAYLITERAL;
PARENTHESIZEDEXPRESSION -> NBO EXPRESSION NBC;

% Function Expression
FUNCTIONEXPRESSION -> ANONYMOUSFUNCTION | NAMEDFUNCTION;

% Object Literal
OBJECTLITERAL -> CBO CBC | CBO FIELDLIST CBC;
FIELDLIST -> LITERALFIELD | FIELDLIST COMMA LITERALFIELD;
LITERALFIELD -> VAR_VARIABLE COLON ASSIGNMENTEXPRESSION;

% Array Literal
ARRAYLITERAL -> SBO SBC | SBO ELEMENTLIST SBC;
ELEMENTLIST -> LITERALELEMENT | ELEMENTLIST COMMA LITERALELEMENT;
LITERALELEMENT -> ASSIGNMENTEXPRESSION;

% Left Side Expressions
LEFTSIDEEXPRESSION -> CALLEXPRESSION | SHORTNEWEXPRESSION;
CALLEXPRESSION -> PRIMARYEXPRESSION | FULLNEWEXPRESSION | CALLEXPRESSION MEMBEROPERATOR | CALLEXPRESSION ARGUMENTS
FULLNEWEXPRESSION -> new FULLNEWSUBEXPRESSION ARGUMENTS;
SHORTNEWEXPRESSION -> new SHORTNEWEXPRESSION;
FULLNEWSUBEXPRESSION -> PRIMARYEXPRESSION | FULLNEWEXPRESSION | FULLNEWSUBEXPRESSION MEMBEROPERATOR;
SHORTNEWSUBEXPRESSION -> FULLNEWSUBEXPRESSION | SHORTNEWSEXPRESSION;
MEMBEROPERATOR -> SBO EXPRESSION SBC | DOT VAR_VARIABLE;
ARGUMENTS -> NBO NBC | NBO ARGUMENTLIST NBC;
ARGUMENTLIST -> ASSIGNMENTEXPRESSION | ARGUMENTLIST COMMA ASSIGNMENTEXPRESSION;

% Postfix Operator
POSTFIXEXPRESSION -> LEFTSIDEEXPRESSION | LEFTSIDEEXPRESSION INCR | LEFTSIDEEXPRESSION DECR;

% Unary Operators
UNARYEXPRESSION -> POSTFIXEXPRESSION | DELETE LEFTSIDEEXPRESSION | VOID UNARYEXPRESSION | TYPEOF UNARYEXPRESSION | INCR LEFTSIDEEXPRESSION | DECR LEFTSIDEEXPRESSION | PLUS UNARYEXPRESSION | MIN UNARYEXPRESSION | WAVE UNARYEXPRESSION | SERU UNARYEXPRESSION;

% Multiplicative Expression
MULTIPLICATIVEEXPRESSION -> UNARYEXPRESSION | MULTIPLICATIVEEXPRESSION MUL UNARYEXPRESSION | MULTIPLICATIVEEXPRESSION DIVIDE UNARYEXPRESSION | MULTIPLICATIVEEXPRESSION PERSEN UNARYEXPRESSION;

% Additive Operator
ADDITIVEEXPRESSION -> MULTIPLICATIVEEXPRESSION | ADDITIVEEXPRESSION PLUS MULTIPLICATIVEEXPRESSION | ADDITIVEEXPRESSION MIN MULTIPLICATIVEEXPRESSION;

% Shift Operator
SHIFTEXPRESSION -> ADDITIVEEXPRESSION | SHIFTEXPRESSION LESS LESS ADDITIVEEXPRESSION | SHIFTEXPRESSION GREAT GREAT ADDITIVEEXPRESSION | SHIFTEXPRESSION GREAT GREAT GREAT ADDITIVEEXPRESSION;

% Relational Operator
RELATIONALEXPRESSION -> SHIFTEXPRESSION | RELATIONALEXPRESSION LESS SHIFTEXPRESSION | RELATIONALEXPRESSION GREAT SHIFTEXPRESSION | RELATIONALEXPRESSION LESS EQUAL SHIFTEXPRESSION | RELATIONALEXPRESSION GREAT EQUAL SHIFTEXPRESSION | RELATIONALEXPRESSION INSTANCEOF RELATIONALEXPRESSION | RELATIONALEXPRESSION INS RELATIONALEXPRESSION;

% Equality Operator
EQUALITYEXPRESSION -> RELATIONALEXPRESSION | EQUALITYEXPRESSION EQUAL EQUAL RELATIONALEXPRESSION | EQUALITYEXPRESSION NOT EQUAL RELATIONALEXPRESSION;

% Bitwise Operator
BITWISEANDEXPRESSION -> EQUALITYEXPRESSION | BITWISEANDEXPRESSION ANDS EQUALITYEXPRESSION;
BITWISEXOREXPRESSION -> BITWISEANDEXPRESSION | BITWISEXOREXPRESSION XORS BITWISEANDEXPRESSION;
BITWISEOREXPRESSION -> BITWISEXOREXPRESSION | BITWISEANDEXPRESSION ORS BITWISEXOREXPRESSION;

% Binary Logical Operator
LOGICALANDEXPRESSION -> BITWISEOREXPRESSION | LOGICALANDEXPRESSION ANDS ANDS BITWISEOREXPRESSION;
LOGICALOREXPRESSION -> LOGICALANDEXPRESSION | LOGICALOREXPRESSION ORS ORS LOGICALANDEXPRESSION;

% Conditional Operator
CONDITIONALEXPRESSION -> LOGICALOREXPRESSION | LOGICALOREXPRESSION QUEST ASSIGNMENTEXPRESSION COLON ASSIGNMENTEXPRESSION;

% Assignment Operator
ASSIGNMENTEXPRESSION -> CONDITIONALEXPRESSION | LEFTSIDEEXPRESSION EQUAL ASSIGNMENTEXPRESSION | LEFTSIDEEXPRESSION COMPOUNDASSIGNMENT ASSIGNMENTEXPRESSION;
COMPOUNDASSIGNMENT -> MUL EQUAL | DIVIDE EQUAL | PERSEN EQUAL | PLUS EQUAL | MIN EQUAL | LESS LESS EQUAL | GREAT GREAT EQUAL | GREAT GREAT GREAT EQUAL | ANDS EQUAL | XORS EQUAL | ORS EQUAL;

% Expressions
EXPRESSION -> ASSIGNMENTEXPRESSION | EXPRESSION COMMA ASSIGNMENTEXPRESSION;
OPTIONALEXPRESSION -> EXPRESSION | ;

% Statement
STATEMENT -> EMPTYSTATEMENT | EXPRESSIONSTATEMENT OPTIONALSEMICOLON | VARIABLEDEFINITION OPTIONALSEMICOLON | BLOCK | LABELEDSTATEMENT | IFSTATEMENT | SWITCHSTATEMENT | DOSTATEMENT OPTIONALSEMICOLON | WHILESTATEMENT | FORSTATEMENT | WITHSTATEMENT | CONTINUESTATEMENT OPTIONALSEMICOLON | BREAKSTATEMENT OPTIONALSEMICOLON | RETURNSTATEMENT OPTIONALSEMICOLON | THROWSTATEMENT OPTIONALSEMICOLON | TRYSTATEMENT;
OPTIONALSEMICOLON -> SEMICOLON | ;

% Empty Statement
EMPTYSTATEMENT -> SEMICOLON;

% Expression Statement
EXPRESSIONSTATEMENT -> EXPRESSION;

% Variable Definition
VARIABLEDEFINITION -> VAR VARIABLEDECLARATIONLIST;
VARIABLEDECLARATIONLIST -> VARIABLEDECLARATION | VARIABLEDECLARATIONLIST COMMA VARIABLEDECLARATION;
VARIABLEDECLARATION -> VAR_VARIABLE VARIABLEINITIALIZER;
VARIABLEINITIALIZER -> EQUAL ASSIGNMENTEXPRESSION | ;

% Block
BLOCK -> CBO BLOCKSTATEMENTS CBC;
BLOCKSTATEMENTS ->  | BLOCKSTATEMENTSPREFIX;
BLOCKSTATEMENTSPREFIX -> STATEMENT | BLOCKSTATEMENTSPREFIX STATEMENT;

% Labeled Statement
LABELEDSTATEMENT -> VAR_VARIABLE COLON STATEMENT;

% If Statement
IFSTATEMENT -> IF PARENTHESIZEDEXPRESSION STATEMENT | IF PARENTHESIZEDEXPRESSION STATEMENT ELSE STATEMENT;

% Switch Statement
SWITCHSTATEMENT -> SWITCH PARENTHESIZEDEXPRESSION CBO CBC | SWITCH PARENTHESIZEDEXPRESSION CBO CASEGROUPS LASTCASEGROUP CBC;
CASEGROUPS -> | CASEGROUPS CASEGROUP;
CASEGROUP -> CASEGUARD BLOCKSTATEMENTSPREFIX;
LASTCASEGROUP -> CASEGUARD BLOCKSTATEMENTS;
CASEGUARDS -> CASEGUARD | CASEGUARDS CASEGUARD;
CASEGUARD -> CASE EXPRESSION COLON | DEFAULT COLON;

% Do-While Statement
DOSTATEMENT -> DO STATEMENT WHILE PARENTHESIZEDEXPRESSION;
WHILESTATEMENT -> WHILE PARENTHESIZEDEXPRESSION STATEMENT;

% For Statement
FORSTATEMENT -> FORS NBO FORINITIALIZER SEMICOLON OPTIONALEXPRESSION SEMICOLON OPTIONALEXPRESSION NBC STATEMENT | FORS NBO FORINBINDING INS EXPRESSION NBC STATEMENT;
FORINITIALIZER ->  | EXPRESSION | VAR VARIABLEDECLARATIONLIST;
FORINBINDING -> VAR VARIABLEDECLARATION | LEFTSIDEEXPRESSION;

% With Statement
WITHSTATEMENT -> WITH PARENTHESIZEDEXPRESSION STATEMENT;

% Continue and Break Statements
CONTINUESTATEMENT -> CONTINUE OPTIONALLABEL;
BREAKSTATEMENT -> BREAKS OPTIONALLABEL;
OPTIONALLABEL -> VAR_VARIABLE | ;

% Return Statement
RETURNSTATEMENT -> RETURNS OPTIONALEXPRESSION;

% Throw Statement
THROWSTATEMENT -> THROWS EXPRESSION;

% Try Statement
TRYSTATEMENT -> TRY BLOCK CATCHCLAUSES | TRY BLOCK FINALLYCLAUSE | TRY BLOCK CATCHCLAUSES FINALLYCLAUSE;
CATCHCLAUSES -> CATCHCLAUSE | CATCHCLAUSES CATCHCLAUSE;
CATCHCLAUSE -> CATCH NBO VAR_VARIABLE NBC BLOCK;
FINALLYCLAUSE -> FINALLY BLOCK;

% Function Definition
FUNCTIONDEFINITION -> NAMEDFUNCTION;
ANONYMOUSFUNCTION -> DEFS FORMALPARAMETERSANDBODY;
NAMEDFUNCTION -> DEFS VAR_VARIABLE FORMALPARAMETERSANDBODY;
FORMALPARAMETERSANDBODY -> NBO FORMALPARAMETERS NBC CBO TOPSTATEMENTS CBC;
FORMALPARAMETERS ->  | FORMALPARAMETERSPREFIX;
FORMALPARAMETERSPREFIX -> FORMALPARAMETER | FORMALPARAMETERSPREFIX COMMA FORMALPARAMETER;
FORMALPARAMETER -> VAR_VARIABLE;

% Programs
PROGRAM -> TOPSTATEMENTS;
TOPSTATEMENTS ->  | TOPSTATEMENTSPREFIX;
TOPSTATEMENTSPREFIX -> TOPSTATEMENT | TOPSTATEMENTSPREFIX TOPSTATEMENT;
TOPSTATEMENT -> STATEMENT | FUNCTIONDEFINITION;

DOT -> .;
XORS -> ^;
ANDS -> &;
ORS -> |;
NEW -> new;
THIS -> this;
NULL -> null;
INSTANCEOF -> instanceof;
SERU -> !;
QUEST -> ?;
HASHTAG -> #;
PERSEN -> %;
NBO -> (;
NBC -> );
WAVE -> ~;
MUL -> *;
POW -> * *;
PLUS -> +;
INCR -> + +;
MIN -> -;
DECR -> - -; 
COMMA -> ,;
DIVIDE -> /;
DIV -> / /;
COLON -> :;
LESS -> <;
EQUAL -> =;
GREAT -> >;
SBO -> [;
SBC -> ];
UNDERSCORE -> _;
CBO -> {;
CBC -> };
PETIK1 -> ';
PETIK2 -> ";
NONES -> none;
DELETE -> delete;
SWITCH -> switch;
CASE -> case;
VOID -> void;
TYPEOF -> typeof;
ANDS -> and;
TRY -> try
ORS -> or;
ISS -> is;
INS -> in;
NOTS -> not;
TRUES -> true;
FALSES -> false;
FORS -> for;
DO -> do;
WHILE -> while;
IFS -> if;
ELIFS -> else if;
ELSES -> else;
BREAKS -> break;
CONTINUES -> continue;
FINALLY -> finally;
CATCH -> catch;
DEFS -> function;
RETURNS -> return;
CLASSS -> class;
FROMS -> from;
IMPORTS -> import;
SEMICOLON -> ;;
VAR -> var;